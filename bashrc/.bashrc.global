function functions {
  typeset -F
}

function current_project {
    if x=`readlink $HOME/.sessions/$MJM_HOST`; then
      basename $x
    else
      echo "No Project"
    fi
}

function project {
  local myproject=`current_project`

  if [ ! -d $HOME/.sessions ]; then
    mkdir -p $HOME/.sessions
  fi

  if [ -z ${1+x} ]; then 
    echo "Current Project is: " $myproject
  else
    rm -f $HOME/.sessions/$MJM_HOST

    mkdir -p $MJM_WS/projects/$MJM_HOST/$1 $MJM_WS/projects/src/$1 $MJM_SCRATCH/projects/$MJM_HOST/$1/build/$MJM_ARCH $MJM_SCRATCH/projects/$MJM_HOST/$1/install/$MJM_ARCH/install $MJM_SCRATCH/projects/$MJM_HOST/$1/install/$MJM_ARCH/install2

    if [ "$MJM_WS" != "$MJM_SCRATCH" ]
    then
      rm -f $MJM_WS/projects/$MJM_HOST/$1/install $MJM_WS/projects/$MJM_HOST/$1/build
      ln -s $MJM_SCRATCH/projects/$MJM_HOST/$1/build $MJM_WS/projects/$MJM_HOST/$1/build 
      ln -s $MJM_SCRATCH/projects/$MJM_HOST/$1/install $MJM_WS/projects/$MJM_HOST/$1/install 
    fi

    rm -f $MJM_WS/projects/$MJM_HOST/$1/src 
    ln -s $MJM_WS/projects/src/$1 $MJM_WS/projects/$MJM_HOST/$1/src 
    rm -f $HOME/.sessions/$MJM_HOST
    ln -s $MJM_WS/projects/$MJM_HOST/$1 $HOME/.sessions/$MJM_HOST
    if [ "$myproject" == "ares" ]; then
      if [ -f /usr/gapps/ares/bin/ares.bashrc ]; then
        . /usr/gapps/ares/bin/ares.bashrc
      fi
    fi
  fi
}

function update_dots {
  (cd $HOME/.mydotfiles; git pull)
}

function init_vim {
  rm -rf $HOME/.vim
  ln -s $HOME/.mydotfiles/vim $HOME/.vim
}

. $HOME/.mydotfiles/bashrc/.bash_git

#
# MJM_HOST has been defined and exported by .bash_profile
#
if [ -f $HOME/.mydotfiles/bashenv/rc.$MJM_HOST ]; then
    . $HOME/.mydotfiles/bashenv/rc.$MJM_HOST
elif [ -f $HOME/.mydotfiles/bashenv/rc.default ]; then
    . $HOME/.mydotfiles/bashenv/rc.default
fi

if [ -f $HOME/.vim/env ]; then
    . $HOME/.vim/env
fi

force_color_prompt=yes
alias a=alias

if [ "`uname -s`" = "Darwin" ]; then
  alias d="ls -sFG"
  alias la="ls -alG"
  alias lt="ls -ltG"
else
  alias d="ls -sF --color"
  alias la="ls -al --color"
  alias lt="ls -lt --color"
fi
alias C=clear
alias f=pushd
alias b=popd
alias h=history
alias J="jobs -l"
alias vi=vim
alias vim="vim --startuptime ~/vim.log"

# TOSS3 Clusters on CZ
# Borax(Intel), 48 nodes, B654, Serial
# Opal, 192 nodes, B451, Serial (LC Testing)
# Quartz(Intel), 2688 nodes, B654, Serial
alias cztoss="ssh quartz"

# TOSS3 Clusters on RZ
# RZGenie(Intel), 48 nodes, B451, Serial
# RZTopaz(Intel), 768 nodes, B654, Serial (LC Testing)
# RZTrona(Intel), 2688 nodes, B654, Serial
alias rztoss="ssh rztrona"

export HISTSIZE=5000
export HISTFILESIZE=20000
shopt -s histappend                       # append history file

prompt_command () {
    if [ $? -eq 0 ]; then # set an error string for the prompt, if applicable
        ERRPROMPT=" "
    else
        ERRPROMPT='->($?) '
    fi
    if [ "\$(type -t __git_ps1)" ]; then # if we're in a Git repo, show current branch
        BRANCH="\$(__git_ps1 '[ %s ] ')"
    fi
    local myproject=`current_project`
    local TIME=`fmt_time` # format time for prompt string
    local LOAD=`uptime|awk '{min=NF-2;print $min}'`
    #local COLOR_GREEN="\[\033[0;32m\]"
    #local COLOR_CYAN="\[\033[0;36m\]"
    #local COLOR_BOLD_CYAN="\[\033[1;36m\]"
    #local COLOR_BLUE="\[\033[0;34m\]"
    #local COLOR_GRAY="\[\033[0;37m\]"
    #local COLOR_DARK_GRAY="\[\033[1;30m\]"
    #local COLOR_WHITE="\[\033[1;37m\]"
    #local COLOR_RED="\[\033[0;31m\]"
    local COLOR_NC="\e[0m" # No Color
    local COLOR_WHITE="\e[1;37m"
    local COLOR_BLACK="\e[0;30m"
    local COLOR_BLUE="\e[0;34m"
    local COLOR_LIGHT_BLUE="\e[1;34m"
    local COLOR_GREEN="\e[0;32m"
    local COLOR_LIGHT_GREEN="\e[1;32m"
    local COLOR_CYAN="\e[0;36m"
    local COLOR_LIGHT_CYAN="\e[1;36m"
    local COLOR_RED="\e[0;31m"
    local COLOR_LIGHT_RED="\e[1;31m"
    local COLOR_PURPLE="\e[0;35m"
    local COLOR_LIGHT_PURPLE="\e[1;35m"
    local COLOR_BROWN="\e[0;33m"
    local COLOR_YELLOW="\e[1;33m"
    local COLOR_GRAY="\e[0;30m"
    local COLOR_LIGHT_GRAY="\e[0;37m"
    # return color to Terminal setting for text color
    local COLOR_DEFAULT="\[\033[0;39m\]"
    # set the titlebar to the last 2 fields of pwd
    local MYPWD=`pwdtail`
    local TITLEBAR='\[\e]2;`pwdtail`\a'
    local NODE_TYPE=`node_prompt`
    local TABNAME="\033]0;${HOSTNAME%%.*}\007"
    printf "\033k${HOSTNAME%%.*} - ${NODE_TYPE}\033\\"
    export PS1="\[${TABNAME}\]\[${TITLEBAR}\]${COLOR_WHITE}${TIME} ${COLOR_BLUE}[ \u@\h (${NODE_TYPE} - ${myproject}) ]${COLOR_RED}$ERRPROMPT${COLOR_NC}${MYPWD} ${COLOR_GREEN}${BRANCH}\n${COLOR_DEFAULT}$ "
    history -a
    history -c
    history -r
}
PROMPT_COMMAND=prompt_command

fmt_time () { #format time just the way I likes it
    if [ `date +%p` = "PM" ]; then
        meridiem="pm"
    else
        meridiem="am"
    fi
    date +"%l:%M:%S$meridiem"|sed 's/ //g'
}
pwdtail () { #returns the last 2 fields of the working directory
    pwd -P
}
chkload () { #gets the current 1m avg CPU load
    local CURRLOAD=`uptime|awk '{print $8}'`
    if [ "$CURRLOAD" > "1" ]; then
        local OUTP="HIGH"
    elif [ "$CURRLOAD" < "1" ]; then
        local OUTP="NORMAL"
    else
        local OUTP="UNKNOWN"
    fi
    echo $CURRLOAD
}

function node_prompt
{
  if [ -x "$(command -v nodeattr)" ]; then
    nodeattr -Q `hostname -s` compute
    if [ "$?" = "1" ]; then
      echo "LOGIN"
    else
      echo "COMPUTE"
    fi
  else
    echo "LOGIN"
  fi
}

export HISTSIZE=50000
export HISTFILESIZE=100000
